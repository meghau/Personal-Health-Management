/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dbms_project1;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author abc
 */
public class Additional_Queries extends javax.swing.JFrame {

    /**
     * Creates new form Additional_Queries
     */
    public Additional_Queries() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        result = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        hs_auth_sept = new javax.swing.JButton();
        pat_not_complying = new javax.swing.JButton();
        sick_HS = new javax.swing.JButton();
        wellPatients = new javax.swing.JButton();
        diffObservedRecorded = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Patient_Disease>1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        result.setColumns(20);
        result.setRows(5);
        jScrollPane1.setViewportView(result);

        jButton2.setText("PID with Two Health Supporter");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Sick Patient who's HS also Sick");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("ALERT 1");

        jButton6.setText("ALERT2");

        hs_auth_sept.setText("HS authorized in Sept");
        hs_auth_sept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hs_auth_septActionPerformed(evt);
            }
        });

        pat_not_complying.setText("Patients not complying");
        pat_not_complying.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pat_not_complyingActionPerformed(evt);
            }
        });

        sick_HS.setText("HS who themselves are patients");
        sick_HS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sick_HSActionPerformed(evt);
            }
        });

        wellPatients.setText("Patients who are not sick");
        wellPatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wellPatientsActionPerformed(evt);
            }
        });

        diffObservedRecorded.setText("count(diff obsrv time and record time)");
        diffObservedRecorded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diffObservedRecordedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(diffObservedRecorded, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(wellPatients, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sick_HS, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                            .addComponent(hs_auth_sept, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pat_not_complying, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hs_auth_sept)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pat_not_complying)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sick_HS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wellPatients)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(diffObservedRecorded)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
             Connection con=DBMS_Connection.get();
               // String patient_id=DBMS_Connection.loginID;
                String s="";
                String query1="select Patient_ID from Diagnosis GROUP BY Patient_ID HAVING COUNT(*)>1";
                Statement stm=con.createStatement();
                ResultSet rs=stm.executeQuery(query1);
                while(rs.next())
                {
                    s=s+rs.getString(1)+"\n";
                }
                result.setText(s);
                con.close();
        } catch (SQLException ex) {
            Logger.getLogger(Additional_Queries.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
                Connection con=DBMS_Connection.get();
             //   String patient_id=DBMS_Connection.loginID;
                String s="";
                String query1="(select ID FROM Sick_Patient WHERE PSID IS NOT NULL AND SSID IS NOT NULL)UNION(select ID FROM Well_Patient WHERE PSID IS NOT NULL AND SSID IS NOT NULL)";
                Statement stm=con.createStatement();
                ResultSet rs=stm.executeQuery(query1);
                while(rs.next())
                {
                    s=s+rs.getString(1)+"\n";
                }
                result.setText(s);
                con.close();
        } catch (SQLException ex) {
            Logger.getLogger(Additional_Queries.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
                Connection con=DBMS_Connection.get();
             //   String patient_id=DBMS_Connection.loginID;
                String s="";
                String query1="select ID FROM Sick_Patient WHERE PSID in (select id from sick_patient) OR SSID in (select id from sick_patient)";
                Statement stm=con.createStatement();
                ResultSet rs=stm.executeQuery(query1);
                while(rs.next())
                {
                    s=s+rs.getString(1)+"\n";
                }
                result.setText(s);
                con.close();
        } catch (SQLException ex) {
            Logger.getLogger(Additional_Queries.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void hs_auth_septActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hs_auth_septActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
                Connection con=DBMS_Connection.get();
             //   String patient_id=DBMS_Connection.loginID;
                String s="";
                String query1="select count(distinct p.id) from sick_patient s, patient p, diagnosis d where ((p.id=s.psid AND s.p_auth_date BETWEEN '01-Sep-2016' AND '30-Sep-2016') OR (p.id=s.ssid AND s.s_auth_date BETWEEN '01-Sep-2016' AND '30-Sep-2016')) AND s.id = d.patient_id AND d.disease_name = 'HD'";
                Statement stm=con.createStatement();
                ResultSet rs=stm.executeQuery(query1);
                while(rs.next())
                {
                    s=s+rs.getString(1)+"\n";
                }
                result.setText(s);
                con.close();
        } catch (SQLException ex) {
            Logger.getLogger(Additional_Queries.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_hs_auth_septActionPerformed

    private void pat_not_complyingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pat_not_complyingActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
                Connection con=DBMS_Connection.get();
             //   String patient_id=DBMS_Connection.loginID;
                String s="";
//                String query1="select count(distinct patient_id) from sick_patient s, patient p, diagnosis d where ((p.id=s.psid AND s.p_auth_date BETWEEN '01-Sep-2016' AND '30-Sep-2016') OR (p.id=s.ssid AND s.s_auth_date BETWEEN '01-Sep-2016' AND '30-Sep-2016')) AND s.id = d.patient_id AND d.disease_name = 'HD'";
                Statement stm=con.createStatement();
                ResultSet rs=stm.executeQuery(query1);
                while(rs.next())
                {
                    s=s+rs.getString(1)+"\n";
                }
                result.setText(s);
                con.close();
        } catch (SQLException ex) {
            Logger.getLogger(Additional_Queries.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pat_not_complyingActionPerformed

    private void sick_HSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sick_HSActionPerformed
        try {
                Connection con=DBMS_Connection.get();
             //   String patient_id=DBMS_Connection.loginID;
                String s="";
                String query1="select h.ID FROM health_supporter h WHERE h.ID in (select s.id from sick_patient s)";
                Statement stm=con.createStatement();
                ResultSet rs=stm.executeQuery(query1);
                while(rs.next())
                {
                    s=s+rs.getString(1)+"\n";
                }
                result.setText(s);
                con.close();
        } catch (SQLException ex) {
            Logger.getLogger(Additional_Queries.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sick_HSActionPerformed

    private void wellPatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wellPatientsActionPerformed
        try {
                Connection con=DBMS_Connection.get();
             //   String patient_id=DBMS_Connection.loginID;
                String s="";
                String query1="select id from well_patient";
                Statement stm=con.createStatement();
                ResultSet rs=stm.executeQuery(query1);
                while(rs.next())
                {
                    s=s+rs.getString(1)+"\n";
                }
                result.setText(s);
                con.close();
        } catch (SQLException ex) {
            Logger.getLogger(Additional_Queries.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_wellPatientsActionPerformed

    private void diffObservedRecordedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diffObservedRecordedActionPerformed
        try {
                Connection con=DBMS_Connection.get();
             //   String patient_id=DBMS_Connection.loginID;
                String s="";
                String query1="select count(distinct pid) from records where observation_date <> recorded_date";;
                Statement stm=con.createStatement();
                ResultSet rs=stm.executeQuery(query1);
                while(rs.next())
                {
                    s=s+rs.getString(1)+"\n";
                }
                result.setText(s);
                con.close();
        } catch (SQLException ex) {
            Logger.getLogger(Additional_Queries.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_diffObservedRecordedActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Additional_Queries.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Additional_Queries.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Additional_Queries.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Additional_Queries.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Additional_Queries().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton diffObservedRecorded;
    private javax.swing.JButton hs_auth_sept;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton pat_not_complying;
    private javax.swing.JTextArea result;
    private javax.swing.JButton sick_HS;
    private javax.swing.JButton wellPatients;
    // End of variables declaration//GEN-END:variables
}
